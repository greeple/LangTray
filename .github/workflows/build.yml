name: Build LangTray

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g. v1.0.0)'
        required: true
        type: string

jobs:
  msvc:
    name: MSVC ${{ matrix.arch }}
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64, x86]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSVC dev cmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Build (MSVC ${{ matrix.arch }}) - size-optimized
        shell: pwsh
        run: |
          # Максимально ужимаем MSVC:
          #  - /O1            минимизировать размер
          #  - /GL            Whole Program Optimization (требует /LTCG на линковке)
          #  - /Gy /Gw        function-level + global data optimization
          #  - /GF            string pooling
          #  - /GR-           без RTTI
          #  - /GS-           без security cookies (минимальный размер; см. trade-off)
          #  - /utf-8         исходник в UTF-8
          #  Линкер:
          #  - /LTCG          link-time code generation
          #  - /OPT:REF,ICF   выкинуть неиспользуемое, схлопнуть одинаковые
          #  - /INCREMENTAL:NO
          #
          # Примечание: используем /MD (CRT динамически) — так меньше размер EXE.
          $CL   = '/nologo /O1 /GL /Gy /Gw /GF /GR- /GS- /utf-8 /DUNICODE /D_UNICODE'
          $LINK = '/SUBSYSTEM:WINDOWS /LTCG /OPT:REF,ICF /INCREMENTAL:NO user32.lib shell32.lib gdi32.lib advapi32.lib'
          cmd /c "cl $CL LangTray.cpp /link $LINK"

      - name: Package ZIP (MSVC ${{ matrix.arch }})
        shell: pwsh
        run: |
          $name = "LangTray-msvc-${{ matrix.arch }}"
          $pkg  = "out/$name"
          New-Item -ItemType Directory -Force -Path $pkg | Out-Null
          Copy-Item "LangTray.exe" "$pkg/LangTray.exe"
          if (Test-Path "icons") { Copy-Item -Recurse -Force "icons" "$pkg/icons" }
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Compress-Archive -Force -CompressionLevel Optimal -Path "$pkg/*" -DestinationPath "dist/$name.zip"

      - name: Upload artifact ZIP (MSVC ${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: LangTray-msvc-${{ matrix.arch }}.zip
          path: dist/LangTray-msvc-${{ matrix.arch }}.zip

  mingw:
    name: MinGW ${{ matrix.msystem }}
    runs-on: windows-2022
    strategy:
      matrix:
        msystem: [MINGW64, MINGW32]
        include:
          - msystem: MINGW64
            pkg: mingw-w64-x86_64-toolchain
            zip: LangTray-mingw64.zip
          - msystem: MINGW32
            pkg: mingw-w64-i686-toolchain
            zip: LangTray-mingw32.zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSYS2 (${{ matrix.msystem }})
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          install: ${{ matrix.pkg }}
          update: true

      - name: Build (${{ matrix.msystem }})
        shell: msys2 {0}
        run: |
          # Самодостаточный exe без libgcc_s*.dll и libstdc++*.dll
          g++ -O2 -s -municode -mwindows -finput-charset=UTF-8 \
             -static-libgcc -static-libstdc++ \
             LangTray.cpp -o LangTray.exe -luser32 -lshell32 -lgdi32 -ladvapi32

      - name: Package ZIP (${{ matrix.msystem }})
        shell: pwsh
        run: |
          $name = "${{ matrix.zip }}".Replace(".zip","")
          $pkg  = "out/$name"
          New-Item -ItemType Directory -Force -Path $pkg | Out-Null
          Copy-Item "LangTray.exe" "$pkg/LangTray.exe"
          if (Test-Path "icons") { Copy-Item -Recurse -Force "icons" "$pkg/icons" }
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Compress-Archive -Force -CompressionLevel Optimal -Path "$pkg/*" -DestinationPath "dist/${{ matrix.zip }}"

      - name: Upload artifact ZIP (${{ matrix.msystem }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.zip }}
          path: dist/${{ matrix.zip }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [msvc, mingw]
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Resolve tag
        id: tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "value=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "value=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Download artifacts (ZIPs)
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: '*.zip'
          merge-multiple: true

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.value }}
          name: LangTray ${{ steps.tag.outputs.value }}
          files: dist/*.zip
          overwrite_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
