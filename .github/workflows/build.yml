name: Build LangTray

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  msvc:
    name: MSVC ${{ matrix.arch }}
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64, x86]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSVC dev cmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Build (MSVC ${{ matrix.arch }})
        shell: pwsh
        run: |
          cl /nologo /O2 /utf-8 LangTray.cpp /DUNICODE /D_UNICODE /link /SUBSYSTEM:WINDOWS user32.lib shell32.lib gdi32.lib advapi32.lib
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Move-Item LangTray.exe "dist/LangTray-msvc-${{ matrix.arch }}.exe"

      - name: Prepare artifact folder (MSVC ${{ matrix.arch }})
        shell: pwsh
        run: |
          $name = "LangTray-msvc-${{ matrix.arch }}"
          $out  = "package/$name"
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          Copy-Item "dist/$name.exe" "$out/LangTray.exe"
          if (Test-Path "icons") { Copy-Item -Recurse -Force "icons" "$out/icons" }

      - name: Upload artifact (folder) (MSVC ${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: LangTray-msvc-${{ matrix.arch }}
          path: package/LangTray-msvc-${{ matrix.arch }}

  mingw:
    name: MinGW ${{ matrix.msystem }}
    runs-on: windows-latest
    strategy:
      matrix:
        msystem: [MINGW64, MINGW32]
        include:
          - msystem: MINGW64
            pkg: mingw-w64-x86_64-toolchain
            exe: LangTray-mingw64.exe
            art: LangTray-mingw64
          - msystem: MINGW32
            pkg: mingw-w64-i686-toolchain
            exe: LangTray-mingw32.exe
            art: LangTray-mingw32

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSYS2 (${{ matrix.msystem }})
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          install: ${{ matrix.pkg }}
          update: true

      - name: Build (${{ matrix.msystem }})
        shell: msys2 {0}
        run: |
          # Самодостаточный exe без libgcc_s*.dll и libstdc++*.dll
          g++ -O2 -s -municode -mwindows -finput-charset=UTF-8 \
             -static-libgcc -static-libstdc++ \
             LangTray.cpp -o LangTray.exe -luser32 -lshell32 -lgdi32 -ladvapi32
          mkdir -p dist
          mv LangTray.exe "dist/${{ matrix.exe }}"

      - name: Prepare artifact folder (${{ matrix.msystem }})
        shell: pwsh
        run: |
          $name = "${{ matrix.art }}"
          $out  = "out/$name"
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          Copy-Item "dist/${{ matrix.exe }}" "$out/LangTray.exe"
          if (Test-Path "icons") { Copy-Item -Recurse -Force "icons" "$out/icons" }

      - name: Upload artifact (folder) (${{ matrix.msystem }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.art }}
          path: out/${{ matrix.art }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [msvc, mingw]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts (as folders)
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: false

      - name: Zip all targets
        run: |
          sudo apt-get update && sudo apt-get install -y zip
          mkdir -p dist
          for d in artifacts/*; do
            [ -d "$d" ] || continue
            name="$(basename "$d")"
            (cd "$d" && zip -r9 "../../dist/${name}.zip" .)
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
